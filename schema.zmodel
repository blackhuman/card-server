// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

plugin hooks {
  provider = '@zenstackhq/tanstack-query'
  target = 'react'
  output = "./src/lib/hooks"
  version = 'v4'
}

plugin trpc {
  provider = '@zenstackhq/trpc'
  output = 'src/server/routers/generated'
  generateClientHelpers = 'next'
}

plugin openapi {
  provider = '@zenstackhq/openapi'
  output = 'openapi/schema.yaml'
  title = 'card-server'
  version = '0.0.1'
  summary = 'Card Server OpenAPI Spec'
  description = 'Card Server OpenAPI Spec'
  prefix = '/api/model'
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("POSTGRES_PRISMA_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  published   Boolean  @default(false)


  @@index([name])

  // author has full access
  // @@allow('all', auth() == createdBy)

  // logged-in users can view published posts
  @@allow('read', auth() != null && published)
}

model Phrase {
  id        String      @id @default(uuid())
  text      String
  textTranslation String?
  sentence String?
  sentenceTranslation String?
  article Article @relation(fields: [articleId], references: [id])
  articleId String
  // collection Collection @relation(fields: [collectionId], references: [id])
  // collectionId String
  conversation Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String? @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String   @default(auth().id)

  @@allow('all', check(article, 'read'))
}

model Article {
  id        String      @id  @default(uuid())
  name     String
  externalLink String?
  phrases  Phrase[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdById String   @default(auth().id)

  // collection Collection @relation(fields: [collectionId], references: [id])
  // collectionId String

  // @@allow('all', check(collection, 'read'))
  @@allow('all', auth().id == createdById)

}

model Conversation {
  id        String      @id @default(uuid())
  messages     String
  phrase Phrase?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@allow('all', check(phrase, 'read'))

}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String    @password @omit
  image         String?
  accounts      Account[]
  sessions      Session[]
  // collections   Collection[]

  @@allow('create,read', true)

  // only the user can update or delete their own profile
  @@allow('update,delete', auth() == this)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
