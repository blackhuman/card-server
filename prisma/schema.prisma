//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// @@allow('read', auth() != null && published)
model Post {
  id        Int      @id() @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  published Boolean  @default(false)

  @@index([name])
}

/// @@allow('all', check(article, 'read'))
model Phrase {
  id                  String        @id() @default(uuid())
  text                String
  textTranslation     String?
  sentence            String?
  sentenceTranslation String?
  article             Article       @relation(fields: [articleId], references: [id])
  articleId           String
  conversation        Conversation? @relation(fields: [conversationId], references: [id])
  conversationId      String?       @unique()
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt()
}

/// @@allow('all', check(collection, 'read'))
model Article {
  id           String     @id() @default(uuid())
  name         String
  externalLink String?
  phrases      Phrase[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt()
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
}

/// @@allow('all', auth() == createdBy)
model Collection {
  id           String    @id() @default(uuid())
  name         String
  externalLink String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt()
  articles     Article[]
  createdBy    User      @relation(fields: [createdById], references: [id])
  createdById  String
}

/// @@allow('all', check(phrase, 'read'))
model Conversation {
  id        String   @id() @default(uuid())
  messages  String
  phrase    Phrase?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model Account {
  id                       String  @id() @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id() @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
  id            String       @id() @default(cuid())
  name          String?
  email         String?      @unique()
  emailVerified DateTime?
  /// @password
  /// @omit
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}
