/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/card/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Card */
        post: operations["createCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Card */
        post: operations["createManyCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Card */
        get: operations["findUniqueCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Card matching the given condition */
        get: operations["findFirstCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Card */
        get: operations["findManyCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Card */
        patch: operations["updateCard"];
        trace?: never;
    };
    "/card/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Cards matching the given condition */
        patch: operations["updateManyCard"];
        trace?: never;
    };
    "/card/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Card */
        post: operations["upsertCard"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Card */
        delete: operations["deleteCard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Cards matching the given condition */
        delete: operations["deleteManyCard"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Card */
        get: operations["countCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Cards */
        get: operations["aggregateCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/card/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Cards by fields */
        get: operations["groupByCard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Article */
        post: operations["createArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Article */
        post: operations["createManyArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Article */
        get: operations["findUniqueArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Article matching the given condition */
        get: operations["findFirstArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Article */
        get: operations["findManyArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Article */
        patch: operations["updateArticle"];
        trace?: never;
    };
    "/article/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Articles matching the given condition */
        patch: operations["updateManyArticle"];
        trace?: never;
    };
    "/article/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Article */
        post: operations["upsertArticle"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Article */
        delete: operations["deleteArticle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Articles matching the given condition */
        delete: operations["deleteManyArticle"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Article */
        get: operations["countArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Articles */
        get: operations["aggregateArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/article/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Articles by fields */
        get: operations["groupByArticle"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new Conversation */
        post: operations["createConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several Conversation */
        post: operations["createManyConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique Conversation */
        get: operations["findUniqueConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first Conversation matching the given condition */
        get: operations["findFirstConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Conversation */
        get: operations["findManyConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a Conversation */
        patch: operations["updateConversation"];
        trace?: never;
    };
    "/conversation/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Conversations matching the given condition */
        patch: operations["updateManyConversation"];
        trace?: never;
    };
    "/conversation/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a Conversation */
        post: operations["upsertConversation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique Conversation */
        delete: operations["deleteConversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Conversations matching the given condition */
        delete: operations["deleteManyConversation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of Conversation */
        get: operations["countConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Conversations */
        get: operations["aggregateConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conversation/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Conversations by fields */
        get: operations["groupByConversation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/create": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a new User */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/createMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create several User */
        post: operations["createManyUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/findUnique": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find one unique User */
        get: operations["findUniqueUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/findFirst": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find the first User matching the given condition */
        get: operations["findFirstUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/findMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of User */
        get: operations["findManyUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/update": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update a User */
        patch: operations["updateUser"];
        trace?: never;
    };
    "/user/updateMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update Users matching the given condition */
        patch: operations["updateManyUser"];
        trace?: never;
    };
    "/user/upsert": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Upsert a User */
        post: operations["upsertUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/delete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete one unique User */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/deleteMany": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Delete Users matching the given condition */
        delete: operations["deleteManyUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Find a list of User */
        get: operations["countUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/aggregate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Aggregate Users */
        get: operations["aggregateUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/user/groupBy": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Group Users by fields */
        get: operations["groupByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        CardScalarFieldEnum: "id" | "text" | "textTranslation" | "sentence" | "sentenceTranslation" | "articleId" | "conversationId" | "createdAt" | "updatedAt" | "createdById";
        /** @enum {string} */
        ArticleScalarFieldEnum: "id" | "name" | "externalLink" | "createdAt" | "updatedAt" | "createdById";
        /** @enum {string} */
        ConversationScalarFieldEnum: "id" | "messages" | "createdAt" | "updatedAt";
        /** @enum {string} */
        UserScalarFieldEnum: "id" | "name" | "email" | "emailVerified" | "password" | "image";
        /** @enum {string} */
        SortOrder: "asc" | "desc";
        /** @enum {string} */
        QueryMode: "default" | "insensitive";
        /** @enum {string} */
        NullsOrder: "first" | "last";
        Card: {
            id: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            article?: null | components["schemas"]["Article"];
            articleId?: null | string;
            conversation?: null | components["schemas"]["Conversation"];
            conversationId?: null | string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            createdById?: null | string;
        };
        Article: {
            id: string;
            name: string;
            externalLink?: null | string;
            cards?: components["schemas"]["Card"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            createdById: string;
        };
        Conversation: {
            id: string;
            messages: string;
            card?: null | components["schemas"]["Card"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        User: {
            id: string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password: string;
            image?: null | string;
        };
        CardWhereInput: {
            AND?: components["schemas"]["CardWhereInput"] | components["schemas"]["CardWhereInput"][];
            OR?: components["schemas"]["CardWhereInput"][];
            NOT?: components["schemas"]["CardWhereInput"] | components["schemas"]["CardWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            text?: components["schemas"]["StringFilter"] | string;
            textTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            sentence?: components["schemas"]["StringNullableFilter"] | string | null;
            sentenceTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            articleId?: components["schemas"]["StringNullableFilter"] | string | null;
            conversationId?: components["schemas"]["StringNullableFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            createdById?: components["schemas"]["StringNullableFilter"] | string | null;
            article?: components["schemas"]["ArticleNullableScalarRelationFilter"] | components["schemas"]["ArticleWhereInput"] | null;
            conversation?: components["schemas"]["ConversationNullableScalarRelationFilter"] | components["schemas"]["ConversationWhereInput"] | null;
        };
        CardOrderByWithRelationInput: {
            id?: components["schemas"]["SortOrder"];
            text?: components["schemas"]["SortOrder"];
            textTranslation?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            sentence?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            sentenceTranslation?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            articleId?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            conversationId?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            createdAt?: components["schemas"]["SortOrder"];
            updatedAt?: components["schemas"]["SortOrder"];
            createdById?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            article?: components["schemas"]["ArticleOrderByWithRelationInput"];
            conversation?: components["schemas"]["ConversationOrderByWithRelationInput"];
        };
        CardWhereUniqueInput: {
            id?: string;
            conversationId?: string;
            AND?: components["schemas"]["CardWhereInput"] | components["schemas"]["CardWhereInput"][];
            OR?: components["schemas"]["CardWhereInput"][];
            NOT?: components["schemas"]["CardWhereInput"] | components["schemas"]["CardWhereInput"][];
            text?: components["schemas"]["StringFilter"] | string;
            textTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            sentence?: components["schemas"]["StringNullableFilter"] | string | null;
            sentenceTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            articleId?: components["schemas"]["StringNullableFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            createdById?: components["schemas"]["StringNullableFilter"] | string | null;
            article?: components["schemas"]["ArticleNullableScalarRelationFilter"] | components["schemas"]["ArticleWhereInput"] | null;
            conversation?: components["schemas"]["ConversationNullableScalarRelationFilter"] | components["schemas"]["ConversationWhereInput"] | null;
        };
        CardScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["CardScalarWhereWithAggregatesInput"] | components["schemas"]["CardScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["CardScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["CardScalarWhereWithAggregatesInput"] | components["schemas"]["CardScalarWhereWithAggregatesInput"][];
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            text?: components["schemas"]["StringWithAggregatesFilter"] | string;
            textTranslation?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            sentence?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            sentenceTranslation?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            articleId?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            conversationId?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
            createdById?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
        };
        ArticleWhereInput: {
            AND?: components["schemas"]["ArticleWhereInput"] | components["schemas"]["ArticleWhereInput"][];
            OR?: components["schemas"]["ArticleWhereInput"][];
            NOT?: components["schemas"]["ArticleWhereInput"] | components["schemas"]["ArticleWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringFilter"] | string;
            externalLink?: components["schemas"]["StringNullableFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            createdById?: components["schemas"]["StringFilter"] | string;
            cards?: components["schemas"]["CardListRelationFilter"];
        };
        ArticleOrderByWithRelationInput: {
            id?: components["schemas"]["SortOrder"];
            name?: components["schemas"]["SortOrder"];
            externalLink?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            createdAt?: components["schemas"]["SortOrder"];
            updatedAt?: components["schemas"]["SortOrder"];
            createdById?: components["schemas"]["SortOrder"];
            cards?: components["schemas"]["CardOrderByRelationAggregateInput"];
        };
        ArticleWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["ArticleWhereInput"] | components["schemas"]["ArticleWhereInput"][];
            OR?: components["schemas"]["ArticleWhereInput"][];
            NOT?: components["schemas"]["ArticleWhereInput"] | components["schemas"]["ArticleWhereInput"][];
            name?: components["schemas"]["StringFilter"] | string;
            externalLink?: components["schemas"]["StringNullableFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            createdById?: components["schemas"]["StringFilter"] | string;
            cards?: components["schemas"]["CardListRelationFilter"];
        };
        ArticleScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["ArticleScalarWhereWithAggregatesInput"] | components["schemas"]["ArticleScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["ArticleScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["ArticleScalarWhereWithAggregatesInput"] | components["schemas"]["ArticleScalarWhereWithAggregatesInput"][];
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            name?: components["schemas"]["StringWithAggregatesFilter"] | string;
            externalLink?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
            createdById?: components["schemas"]["StringWithAggregatesFilter"] | string;
        };
        ConversationWhereInput: {
            AND?: components["schemas"]["ConversationWhereInput"] | components["schemas"]["ConversationWhereInput"][];
            OR?: components["schemas"]["ConversationWhereInput"][];
            NOT?: components["schemas"]["ConversationWhereInput"] | components["schemas"]["ConversationWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            messages?: components["schemas"]["StringFilter"] | string;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            card?: components["schemas"]["CardNullableScalarRelationFilter"] | components["schemas"]["CardWhereInput"] | null;
        };
        ConversationOrderByWithRelationInput: {
            id?: components["schemas"]["SortOrder"];
            messages?: components["schemas"]["SortOrder"];
            createdAt?: components["schemas"]["SortOrder"];
            updatedAt?: components["schemas"]["SortOrder"];
            card?: components["schemas"]["CardOrderByWithRelationInput"];
        };
        ConversationWhereUniqueInput: {
            id?: string;
            AND?: components["schemas"]["ConversationWhereInput"] | components["schemas"]["ConversationWhereInput"][];
            OR?: components["schemas"]["ConversationWhereInput"][];
            NOT?: components["schemas"]["ConversationWhereInput"] | components["schemas"]["ConversationWhereInput"][];
            messages?: components["schemas"]["StringFilter"] | string;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            card?: components["schemas"]["CardNullableScalarRelationFilter"] | components["schemas"]["CardWhereInput"] | null;
        };
        ConversationScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["ConversationScalarWhereWithAggregatesInput"] | components["schemas"]["ConversationScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["ConversationScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["ConversationScalarWhereWithAggregatesInput"] | components["schemas"]["ConversationScalarWhereWithAggregatesInput"][];
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            messages?: components["schemas"]["StringWithAggregatesFilter"] | string;
            createdAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeWithAggregatesFilter"] | string;
        };
        UserWhereInput: {
            AND?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
            OR?: components["schemas"]["UserWhereInput"][];
            NOT?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            name?: components["schemas"]["StringNullableFilter"] | string | null;
            email?: components["schemas"]["StringNullableFilter"] | string | null;
            emailVerified?: components["schemas"]["DateTimeNullableFilter"] | string | null;
            password?: components["schemas"]["StringFilter"] | string;
            image?: components["schemas"]["StringNullableFilter"] | string | null;
        };
        UserOrderByWithRelationInput: {
            id?: components["schemas"]["SortOrder"];
            name?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            email?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            emailVerified?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
            password?: components["schemas"]["SortOrder"];
            image?: components["schemas"]["SortOrder"] | components["schemas"]["SortOrderInput"];
        };
        UserWhereUniqueInput: {
            id?: string;
            email?: string;
            AND?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
            OR?: components["schemas"]["UserWhereInput"][];
            NOT?: components["schemas"]["UserWhereInput"] | components["schemas"]["UserWhereInput"][];
            name?: components["schemas"]["StringNullableFilter"] | string | null;
            emailVerified?: components["schemas"]["DateTimeNullableFilter"] | string | null;
            password?: components["schemas"]["StringFilter"] | string;
            image?: components["schemas"]["StringNullableFilter"] | string | null;
        };
        UserScalarWhereWithAggregatesInput: {
            AND?: components["schemas"]["UserScalarWhereWithAggregatesInput"] | components["schemas"]["UserScalarWhereWithAggregatesInput"][];
            OR?: components["schemas"]["UserScalarWhereWithAggregatesInput"][];
            NOT?: components["schemas"]["UserScalarWhereWithAggregatesInput"] | components["schemas"]["UserScalarWhereWithAggregatesInput"][];
            id?: components["schemas"]["StringWithAggregatesFilter"] | string;
            name?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            email?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
            emailVerified?: components["schemas"]["DateTimeNullableWithAggregatesFilter"] | string | null;
            password?: components["schemas"]["StringWithAggregatesFilter"] | string;
            image?: components["schemas"]["StringNullableWithAggregatesFilter"] | string | null;
        };
        CardCreateInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
            article?: components["schemas"]["ArticleCreateNestedOneWithoutCardsInput"];
            conversation?: components["schemas"]["ConversationCreateNestedOneWithoutCardInput"];
        };
        CardUpdateInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            article?: components["schemas"]["ArticleUpdateOneWithoutCardsNestedInput"];
            conversation?: components["schemas"]["ConversationUpdateOneWithoutCardNestedInput"];
        };
        CardCreateManyInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            articleId?: null | string;
            conversationId?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
        };
        CardUpdateManyMutationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        ArticleCreateInput: {
            id?: string;
            name: string;
            externalLink?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: string;
            cards?: components["schemas"]["CardCreateNestedManyWithoutArticleInput"];
        };
        ArticleUpdateInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            externalLink?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            cards?: components["schemas"]["CardUpdateManyWithoutArticleNestedInput"];
        };
        ArticleCreateManyInput: {
            id?: string;
            name: string;
            externalLink?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: string;
        };
        ArticleUpdateManyMutationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            externalLink?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        ConversationCreateInput: {
            id?: string;
            messages: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            card?: components["schemas"]["CardCreateNestedOneWithoutConversationInput"];
        };
        ConversationUpdateInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            messages?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            card?: components["schemas"]["CardUpdateOneWithoutConversationNestedInput"];
        };
        ConversationCreateManyInput: {
            id?: string;
            messages: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ConversationUpdateManyMutationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            messages?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
        };
        UserCreateInput: {
            id?: string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password: string;
            image?: null | string;
        };
        UserUpdateInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            email?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            emailVerified?: string | components["schemas"]["NullableDateTimeFieldUpdateOperationsInput"] | null;
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            image?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        UserCreateManyInput: {
            id?: string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password: string;
            image?: null | string;
        };
        UserUpdateManyMutationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            email?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            emailVerified?: string | components["schemas"]["NullableDateTimeFieldUpdateOperationsInput"] | null;
            password?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            image?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        StringFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            mode?: components["schemas"]["QueryMode"];
            not?: string | components["schemas"]["NestedStringFilter"];
        };
        StringNullableFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            mode?: components["schemas"]["QueryMode"];
            not?: string | components["schemas"]["NestedStringNullableFilter"] | null;
        };
        DateTimeFilter: {
            /** Format: date-time */
            equals?: string;
            in?: string[];
            notIn?: string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeFilter"];
        };
        ArticleNullableScalarRelationFilter: {
            is?: null | components["schemas"]["ArticleWhereInput"];
            isNot?: null | components["schemas"]["ArticleWhereInput"];
        };
        ConversationNullableScalarRelationFilter: {
            is?: null | components["schemas"]["ConversationWhereInput"];
            isNot?: null | components["schemas"]["ConversationWhereInput"];
        };
        SortOrderInput: {
            sort: components["schemas"]["SortOrder"];
            nulls?: components["schemas"]["NullsOrder"];
        };
        StringWithAggregatesFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            mode?: components["schemas"]["QueryMode"];
            not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedStringFilter"];
            _max?: components["schemas"]["NestedStringFilter"];
        };
        StringNullableWithAggregatesFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            mode?: components["schemas"]["QueryMode"];
            not?: string | components["schemas"]["NestedStringNullableWithAggregatesFilter"] | null;
            _count?: components["schemas"]["NestedIntNullableFilter"];
            _min?: components["schemas"]["NestedStringNullableFilter"];
            _max?: components["schemas"]["NestedStringNullableFilter"];
        };
        DateTimeWithAggregatesFilter: {
            /** Format: date-time */
            equals?: string;
            in?: string[];
            notIn?: string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedDateTimeFilter"];
            _max?: components["schemas"]["NestedDateTimeFilter"];
        };
        CardListRelationFilter: {
            every?: components["schemas"]["CardWhereInput"];
            some?: components["schemas"]["CardWhereInput"];
            none?: components["schemas"]["CardWhereInput"];
        };
        CardOrderByRelationAggregateInput: {
            _count?: components["schemas"]["SortOrder"];
        };
        CardNullableScalarRelationFilter: {
            is?: null | components["schemas"]["CardWhereInput"];
            isNot?: null | components["schemas"]["CardWhereInput"];
        };
        DateTimeNullableFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeNullableFilter"] | null;
        };
        DateTimeNullableWithAggregatesFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeNullableWithAggregatesFilter"] | null;
            _count?: components["schemas"]["NestedIntNullableFilter"];
            _min?: components["schemas"]["NestedDateTimeNullableFilter"];
            _max?: components["schemas"]["NestedDateTimeNullableFilter"];
        };
        ArticleCreateNestedOneWithoutCardsInput: {
            create?: components["schemas"]["ArticleCreateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedCreateWithoutCardsInput"];
            connectOrCreate?: components["schemas"]["ArticleCreateOrConnectWithoutCardsInput"];
            connect?: components["schemas"]["ArticleWhereUniqueInput"];
        };
        ConversationCreateNestedOneWithoutCardInput: {
            create?: components["schemas"]["ConversationCreateWithoutCardInput"] | components["schemas"]["ConversationUncheckedCreateWithoutCardInput"];
            connectOrCreate?: components["schemas"]["ConversationCreateOrConnectWithoutCardInput"];
            connect?: components["schemas"]["ConversationWhereUniqueInput"];
        };
        StringFieldUpdateOperationsInput: {
            set?: string;
        };
        NullableStringFieldUpdateOperationsInput: {
            set?: null | string;
        };
        DateTimeFieldUpdateOperationsInput: {
            /** Format: date-time */
            set?: string;
        };
        ArticleUpdateOneWithoutCardsNestedInput: {
            create?: components["schemas"]["ArticleCreateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedCreateWithoutCardsInput"];
            connectOrCreate?: components["schemas"]["ArticleCreateOrConnectWithoutCardsInput"];
            upsert?: components["schemas"]["ArticleUpsertWithoutCardsInput"];
            disconnect?: boolean | components["schemas"]["ArticleWhereInput"];
            delete?: boolean | components["schemas"]["ArticleWhereInput"];
            connect?: components["schemas"]["ArticleWhereUniqueInput"];
            update?: components["schemas"]["ArticleUpdateToOneWithWhereWithoutCardsInput"] | components["schemas"]["ArticleUpdateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedUpdateWithoutCardsInput"];
        };
        ConversationUpdateOneWithoutCardNestedInput: {
            create?: components["schemas"]["ConversationCreateWithoutCardInput"] | components["schemas"]["ConversationUncheckedCreateWithoutCardInput"];
            connectOrCreate?: components["schemas"]["ConversationCreateOrConnectWithoutCardInput"];
            upsert?: components["schemas"]["ConversationUpsertWithoutCardInput"];
            disconnect?: boolean | components["schemas"]["ConversationWhereInput"];
            delete?: boolean | components["schemas"]["ConversationWhereInput"];
            connect?: components["schemas"]["ConversationWhereUniqueInput"];
            update?: components["schemas"]["ConversationUpdateToOneWithWhereWithoutCardInput"] | components["schemas"]["ConversationUpdateWithoutCardInput"] | components["schemas"]["ConversationUncheckedUpdateWithoutCardInput"];
        };
        CardCreateNestedManyWithoutArticleInput: {
            create?: components["schemas"]["CardCreateWithoutArticleInput"] | components["schemas"]["CardCreateWithoutArticleInput"][] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"][];
            connectOrCreate?: components["schemas"]["CardCreateOrConnectWithoutArticleInput"] | components["schemas"]["CardCreateOrConnectWithoutArticleInput"][];
            createMany?: components["schemas"]["CardCreateManyArticleInputEnvelope"];
            connect?: components["schemas"]["CardWhereUniqueInput"] | components["schemas"]["CardWhereUniqueInput"][];
        };
        CardUpdateManyWithoutArticleNestedInput: {
            create?: components["schemas"]["CardCreateWithoutArticleInput"] | components["schemas"]["CardCreateWithoutArticleInput"][] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"][];
            connectOrCreate?: components["schemas"]["CardCreateOrConnectWithoutArticleInput"] | components["schemas"]["CardCreateOrConnectWithoutArticleInput"][];
            upsert?: components["schemas"]["CardUpsertWithWhereUniqueWithoutArticleInput"] | components["schemas"]["CardUpsertWithWhereUniqueWithoutArticleInput"][];
            createMany?: components["schemas"]["CardCreateManyArticleInputEnvelope"];
            set?: components["schemas"]["CardWhereUniqueInput"] | components["schemas"]["CardWhereUniqueInput"][];
            disconnect?: components["schemas"]["CardWhereUniqueInput"] | components["schemas"]["CardWhereUniqueInput"][];
            delete?: components["schemas"]["CardWhereUniqueInput"] | components["schemas"]["CardWhereUniqueInput"][];
            connect?: components["schemas"]["CardWhereUniqueInput"] | components["schemas"]["CardWhereUniqueInput"][];
            update?: components["schemas"]["CardUpdateWithWhereUniqueWithoutArticleInput"] | components["schemas"]["CardUpdateWithWhereUniqueWithoutArticleInput"][];
            updateMany?: components["schemas"]["CardUpdateManyWithWhereWithoutArticleInput"] | components["schemas"]["CardUpdateManyWithWhereWithoutArticleInput"][];
            deleteMany?: components["schemas"]["CardScalarWhereInput"] | components["schemas"]["CardScalarWhereInput"][];
        };
        CardCreateNestedOneWithoutConversationInput: {
            create?: components["schemas"]["CardCreateWithoutConversationInput"] | components["schemas"]["CardUncheckedCreateWithoutConversationInput"];
            connectOrCreate?: components["schemas"]["CardCreateOrConnectWithoutConversationInput"];
            connect?: components["schemas"]["CardWhereUniqueInput"];
        };
        CardUpdateOneWithoutConversationNestedInput: {
            create?: components["schemas"]["CardCreateWithoutConversationInput"] | components["schemas"]["CardUncheckedCreateWithoutConversationInput"];
            connectOrCreate?: components["schemas"]["CardCreateOrConnectWithoutConversationInput"];
            upsert?: components["schemas"]["CardUpsertWithoutConversationInput"];
            disconnect?: boolean | components["schemas"]["CardWhereInput"];
            delete?: boolean | components["schemas"]["CardWhereInput"];
            connect?: components["schemas"]["CardWhereUniqueInput"];
            update?: components["schemas"]["CardUpdateToOneWithWhereWithoutConversationInput"] | components["schemas"]["CardUpdateWithoutConversationInput"] | components["schemas"]["CardUncheckedUpdateWithoutConversationInput"];
        };
        NullableDateTimeFieldUpdateOperationsInput: {
            set?: null | string;
        };
        NestedStringFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringFilter"];
        };
        NestedStringNullableFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringNullableFilter"] | null;
        };
        NestedDateTimeFilter: {
            /** Format: date-time */
            equals?: string;
            in?: string[];
            notIn?: string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeFilter"];
        };
        NestedStringWithAggregatesFilter: {
            equals?: string;
            in?: string[];
            notIn?: string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedStringFilter"];
            _max?: components["schemas"]["NestedStringFilter"];
        };
        NestedIntFilter: {
            equals?: number;
            in?: number[];
            notIn?: number[];
            lt?: number;
            lte?: number;
            gt?: number;
            gte?: number;
            not?: number | components["schemas"]["NestedIntFilter"];
        };
        NestedStringNullableWithAggregatesFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            lt?: string;
            lte?: string;
            gt?: string;
            gte?: string;
            contains?: string;
            startsWith?: string;
            endsWith?: string;
            not?: string | components["schemas"]["NestedStringNullableWithAggregatesFilter"] | null;
            _count?: components["schemas"]["NestedIntNullableFilter"];
            _min?: components["schemas"]["NestedStringNullableFilter"];
            _max?: components["schemas"]["NestedStringNullableFilter"];
        };
        NestedIntNullableFilter: {
            equals?: null | number;
            in?: null | number[];
            notIn?: null | number[];
            lt?: number;
            lte?: number;
            gt?: number;
            gte?: number;
            not?: number | components["schemas"]["NestedIntNullableFilter"] | null;
        };
        NestedDateTimeWithAggregatesFilter: {
            /** Format: date-time */
            equals?: string;
            in?: string[];
            notIn?: string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeWithAggregatesFilter"];
            _count?: components["schemas"]["NestedIntFilter"];
            _min?: components["schemas"]["NestedDateTimeFilter"];
            _max?: components["schemas"]["NestedDateTimeFilter"];
        };
        NestedDateTimeNullableFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeNullableFilter"] | null;
        };
        NestedDateTimeNullableWithAggregatesFilter: {
            equals?: null | string;
            in?: null | string[];
            notIn?: null | string[];
            /** Format: date-time */
            lt?: string;
            /** Format: date-time */
            lte?: string;
            /** Format: date-time */
            gt?: string;
            /** Format: date-time */
            gte?: string;
            not?: string | components["schemas"]["NestedDateTimeNullableWithAggregatesFilter"] | null;
            _count?: components["schemas"]["NestedIntNullableFilter"];
            _min?: components["schemas"]["NestedDateTimeNullableFilter"];
            _max?: components["schemas"]["NestedDateTimeNullableFilter"];
        };
        ArticleCreateWithoutCardsInput: {
            id?: string;
            name: string;
            externalLink?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: string;
        };
        ArticleUncheckedCreateWithoutCardsInput: {
            id?: string;
            name: string;
            externalLink?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: string;
        };
        ArticleCreateOrConnectWithoutCardsInput: {
            where: components["schemas"]["ArticleWhereUniqueInput"];
            create: components["schemas"]["ArticleCreateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedCreateWithoutCardsInput"];
        };
        ConversationCreateWithoutCardInput: {
            id?: string;
            messages: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ConversationUncheckedCreateWithoutCardInput: {
            id?: string;
            messages: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ConversationCreateOrConnectWithoutCardInput: {
            where: components["schemas"]["ConversationWhereUniqueInput"];
            create: components["schemas"]["ConversationCreateWithoutCardInput"] | components["schemas"]["ConversationUncheckedCreateWithoutCardInput"];
        };
        ArticleUpsertWithoutCardsInput: {
            update: components["schemas"]["ArticleUpdateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedUpdateWithoutCardsInput"];
            create: components["schemas"]["ArticleCreateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedCreateWithoutCardsInput"];
            where?: components["schemas"]["ArticleWhereInput"];
        };
        ArticleUpdateToOneWithWhereWithoutCardsInput: {
            where?: components["schemas"]["ArticleWhereInput"];
            data: components["schemas"]["ArticleUpdateWithoutCardsInput"] | components["schemas"]["ArticleUncheckedUpdateWithoutCardsInput"];
        };
        ArticleUpdateWithoutCardsInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            externalLink?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        ArticleUncheckedUpdateWithoutCardsInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            name?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            externalLink?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
        };
        ConversationUpsertWithoutCardInput: {
            update: components["schemas"]["ConversationUpdateWithoutCardInput"] | components["schemas"]["ConversationUncheckedUpdateWithoutCardInput"];
            create: components["schemas"]["ConversationCreateWithoutCardInput"] | components["schemas"]["ConversationUncheckedCreateWithoutCardInput"];
            where?: components["schemas"]["ConversationWhereInput"];
        };
        ConversationUpdateToOneWithWhereWithoutCardInput: {
            where?: components["schemas"]["ConversationWhereInput"];
            data: components["schemas"]["ConversationUpdateWithoutCardInput"] | components["schemas"]["ConversationUncheckedUpdateWithoutCardInput"];
        };
        ConversationUpdateWithoutCardInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            messages?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
        };
        ConversationUncheckedUpdateWithoutCardInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            messages?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
        };
        CardCreateWithoutArticleInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
            conversation?: components["schemas"]["ConversationCreateNestedOneWithoutCardInput"];
        };
        CardUncheckedCreateWithoutArticleInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            conversationId?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
        };
        CardCreateOrConnectWithoutArticleInput: {
            where: components["schemas"]["CardWhereUniqueInput"];
            create: components["schemas"]["CardCreateWithoutArticleInput"] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"];
        };
        CardCreateManyArticleInputEnvelope: {
            data: components["schemas"]["CardCreateManyArticleInput"] | components["schemas"]["CardCreateManyArticleInput"][];
            skipDuplicates?: boolean;
        };
        CardUpsertWithWhereUniqueWithoutArticleInput: {
            where: components["schemas"]["CardWhereUniqueInput"];
            update: components["schemas"]["CardUpdateWithoutArticleInput"] | components["schemas"]["CardUncheckedUpdateWithoutArticleInput"];
            create: components["schemas"]["CardCreateWithoutArticleInput"] | components["schemas"]["CardUncheckedCreateWithoutArticleInput"];
        };
        CardUpdateWithWhereUniqueWithoutArticleInput: {
            where: components["schemas"]["CardWhereUniqueInput"];
            data: components["schemas"]["CardUpdateWithoutArticleInput"] | components["schemas"]["CardUncheckedUpdateWithoutArticleInput"];
        };
        CardUpdateManyWithWhereWithoutArticleInput: {
            where: components["schemas"]["CardScalarWhereInput"];
            data: components["schemas"]["CardUpdateManyMutationInput"] | components["schemas"]["CardUncheckedUpdateManyWithoutArticleInput"];
        };
        CardScalarWhereInput: {
            AND?: components["schemas"]["CardScalarWhereInput"] | components["schemas"]["CardScalarWhereInput"][];
            OR?: components["schemas"]["CardScalarWhereInput"][];
            NOT?: components["schemas"]["CardScalarWhereInput"] | components["schemas"]["CardScalarWhereInput"][];
            id?: components["schemas"]["StringFilter"] | string;
            text?: components["schemas"]["StringFilter"] | string;
            textTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            sentence?: components["schemas"]["StringNullableFilter"] | string | null;
            sentenceTranslation?: components["schemas"]["StringNullableFilter"] | string | null;
            articleId?: components["schemas"]["StringNullableFilter"] | string | null;
            conversationId?: components["schemas"]["StringNullableFilter"] | string | null;
            createdAt?: components["schemas"]["DateTimeFilter"] | string;
            updatedAt?: components["schemas"]["DateTimeFilter"] | string;
            createdById?: components["schemas"]["StringNullableFilter"] | string | null;
        };
        CardCreateWithoutConversationInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
            article?: components["schemas"]["ArticleCreateNestedOneWithoutCardsInput"];
        };
        CardUncheckedCreateWithoutConversationInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            articleId?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
        };
        CardCreateOrConnectWithoutConversationInput: {
            where: components["schemas"]["CardWhereUniqueInput"];
            create: components["schemas"]["CardCreateWithoutConversationInput"] | components["schemas"]["CardUncheckedCreateWithoutConversationInput"];
        };
        CardUpsertWithoutConversationInput: {
            update: components["schemas"]["CardUpdateWithoutConversationInput"] | components["schemas"]["CardUncheckedUpdateWithoutConversationInput"];
            create: components["schemas"]["CardCreateWithoutConversationInput"] | components["schemas"]["CardUncheckedCreateWithoutConversationInput"];
            where?: components["schemas"]["CardWhereInput"];
        };
        CardUpdateToOneWithWhereWithoutConversationInput: {
            where?: components["schemas"]["CardWhereInput"];
            data: components["schemas"]["CardUpdateWithoutConversationInput"] | components["schemas"]["CardUncheckedUpdateWithoutConversationInput"];
        };
        CardUpdateWithoutConversationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            article?: components["schemas"]["ArticleUpdateOneWithoutCardsNestedInput"];
        };
        CardUncheckedUpdateWithoutConversationInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            articleId?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        CardCreateManyArticleInput: {
            id?: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            conversationId?: null | string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            createdById?: null | string;
        };
        CardUpdateWithoutArticleInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            conversation?: components["schemas"]["ConversationUpdateOneWithoutCardNestedInput"];
        };
        CardUncheckedUpdateWithoutArticleInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            conversationId?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        CardUncheckedUpdateManyWithoutArticleInput: {
            id?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            text?: string | components["schemas"]["StringFieldUpdateOperationsInput"];
            textTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentence?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            sentenceTranslation?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            conversationId?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
            createdAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            updatedAt?: string | components["schemas"]["DateTimeFieldUpdateOperationsInput"];
            createdById?: string | components["schemas"]["NullableStringFieldUpdateOperationsInput"] | null;
        };
        CardDefaultArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
        };
        ArticleDefaultArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
        };
        ConversationDefaultArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
        };
        CardInclude: {
            article?: boolean | components["schemas"]["ArticleDefaultArgs"];
            conversation?: boolean | components["schemas"]["ConversationDefaultArgs"];
        };
        ArticleInclude: {
            cards?: boolean | components["schemas"]["CardFindManyArgs"];
            _count?: boolean | components["schemas"]["ArticleCountOutputTypeDefaultArgs"];
        };
        ConversationInclude: {
            card?: boolean | components["schemas"]["CardDefaultArgs"];
        };
        ArticleCountOutputTypeSelect: {
            cards?: boolean;
        };
        ArticleCountOutputTypeDefaultArgs: {
            select?: components["schemas"]["ArticleCountOutputTypeSelect"];
        };
        CardSelect: {
            id?: boolean;
            text?: boolean;
            textTranslation?: boolean;
            sentence?: boolean;
            sentenceTranslation?: boolean;
            article?: boolean | components["schemas"]["ArticleDefaultArgs"];
            articleId?: boolean;
            conversation?: boolean | components["schemas"]["ConversationDefaultArgs"];
            conversationId?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
        };
        ArticleSelect: {
            id?: boolean;
            name?: boolean;
            externalLink?: boolean;
            cards?: boolean | components["schemas"]["CardFindManyArgs"];
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
            _count?: boolean | components["schemas"]["ArticleCountOutputTypeDefaultArgs"];
        };
        ConversationSelect: {
            id?: boolean;
            messages?: boolean;
            card?: boolean | components["schemas"]["CardDefaultArgs"];
            createdAt?: boolean;
            updatedAt?: boolean;
        };
        UserSelect: {
            id?: boolean;
            name?: boolean;
            email?: boolean;
            emailVerified?: boolean;
            password?: boolean;
            image?: boolean;
        };
        CardCountAggregateInput: {
            id?: boolean;
            text?: boolean;
            textTranslation?: boolean;
            sentence?: boolean;
            sentenceTranslation?: boolean;
            articleId?: boolean;
            conversationId?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
            _all?: boolean;
        };
        CardMinAggregateInput: {
            id?: boolean;
            text?: boolean;
            textTranslation?: boolean;
            sentence?: boolean;
            sentenceTranslation?: boolean;
            articleId?: boolean;
            conversationId?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
        };
        CardMaxAggregateInput: {
            id?: boolean;
            text?: boolean;
            textTranslation?: boolean;
            sentence?: boolean;
            sentenceTranslation?: boolean;
            articleId?: boolean;
            conversationId?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
        };
        ArticleCountAggregateInput: {
            id?: boolean;
            name?: boolean;
            externalLink?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
            _all?: boolean;
        };
        ArticleMinAggregateInput: {
            id?: boolean;
            name?: boolean;
            externalLink?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
        };
        ArticleMaxAggregateInput: {
            id?: boolean;
            name?: boolean;
            externalLink?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            createdById?: boolean;
        };
        ConversationCountAggregateInput: {
            id?: boolean;
            messages?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
            _all?: boolean;
        };
        ConversationMinAggregateInput: {
            id?: boolean;
            messages?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
        };
        ConversationMaxAggregateInput: {
            id?: boolean;
            messages?: boolean;
            createdAt?: boolean;
            updatedAt?: boolean;
        };
        UserCountAggregateInput: {
            id?: boolean;
            name?: boolean;
            email?: boolean;
            emailVerified?: boolean;
            password?: boolean;
            image?: boolean;
            _all?: boolean;
        };
        UserMinAggregateInput: {
            id?: boolean;
            name?: boolean;
            email?: boolean;
            emailVerified?: boolean;
            password?: boolean;
            image?: boolean;
        };
        UserMaxAggregateInput: {
            id?: boolean;
            name?: boolean;
            email?: boolean;
            emailVerified?: boolean;
            password?: boolean;
            image?: boolean;
        };
        AggregateCard: {
            _count?: null | components["schemas"]["CardCountAggregateOutputType"];
            _min?: null | components["schemas"]["CardMinAggregateOutputType"];
            _max?: null | components["schemas"]["CardMaxAggregateOutputType"];
        };
        CardGroupByOutputType: {
            id: string;
            text: string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            articleId?: null | string;
            conversationId?: null | string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            createdById?: null | string;
            _count?: null | components["schemas"]["CardCountAggregateOutputType"];
            _min?: null | components["schemas"]["CardMinAggregateOutputType"];
            _max?: null | components["schemas"]["CardMaxAggregateOutputType"];
        };
        AggregateArticle: {
            _count?: null | components["schemas"]["ArticleCountAggregateOutputType"];
            _min?: null | components["schemas"]["ArticleMinAggregateOutputType"];
            _max?: null | components["schemas"]["ArticleMaxAggregateOutputType"];
        };
        ArticleGroupByOutputType: {
            id: string;
            name: string;
            externalLink?: null | string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            createdById: string;
            _count?: null | components["schemas"]["ArticleCountAggregateOutputType"];
            _min?: null | components["schemas"]["ArticleMinAggregateOutputType"];
            _max?: null | components["schemas"]["ArticleMaxAggregateOutputType"];
        };
        AggregateConversation: {
            _count?: null | components["schemas"]["ConversationCountAggregateOutputType"];
            _min?: null | components["schemas"]["ConversationMinAggregateOutputType"];
            _max?: null | components["schemas"]["ConversationMaxAggregateOutputType"];
        };
        ConversationGroupByOutputType: {
            id: string;
            messages: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
            _count?: null | components["schemas"]["ConversationCountAggregateOutputType"];
            _min?: null | components["schemas"]["ConversationMinAggregateOutputType"];
            _max?: null | components["schemas"]["ConversationMaxAggregateOutputType"];
        };
        AggregateUser: {
            _count?: null | components["schemas"]["UserCountAggregateOutputType"];
            _min?: null | components["schemas"]["UserMinAggregateOutputType"];
            _max?: null | components["schemas"]["UserMaxAggregateOutputType"];
        };
        UserGroupByOutputType: {
            id: string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password: string;
            image?: null | string;
            _count?: null | components["schemas"]["UserCountAggregateOutputType"];
            _min?: null | components["schemas"]["UserMinAggregateOutputType"];
            _max?: null | components["schemas"]["UserMaxAggregateOutputType"];
        };
        CardCountAggregateOutputType: {
            id: number;
            text: number;
            textTranslation: number;
            sentence: number;
            sentenceTranslation: number;
            articleId: number;
            conversationId: number;
            createdAt: number;
            updatedAt: number;
            createdById: number;
            _all: number;
        };
        CardMinAggregateOutputType: {
            id?: null | string;
            text?: null | string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            articleId?: null | string;
            conversationId?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
            createdById?: null | string;
        };
        CardMaxAggregateOutputType: {
            id?: null | string;
            text?: null | string;
            textTranslation?: null | string;
            sentence?: null | string;
            sentenceTranslation?: null | string;
            articleId?: null | string;
            conversationId?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
            createdById?: null | string;
        };
        ArticleCountAggregateOutputType: {
            id: number;
            name: number;
            externalLink: number;
            createdAt: number;
            updatedAt: number;
            createdById: number;
            _all: number;
        };
        ArticleMinAggregateOutputType: {
            id?: null | string;
            name?: null | string;
            externalLink?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
            createdById?: null | string;
        };
        ArticleMaxAggregateOutputType: {
            id?: null | string;
            name?: null | string;
            externalLink?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
            createdById?: null | string;
        };
        ConversationCountAggregateOutputType: {
            id: number;
            messages: number;
            createdAt: number;
            updatedAt: number;
            _all: number;
        };
        ConversationMinAggregateOutputType: {
            id?: null | string;
            messages?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
        };
        ConversationMaxAggregateOutputType: {
            id?: null | string;
            messages?: null | string;
            createdAt?: null | string;
            updatedAt?: null | string;
        };
        UserCountAggregateOutputType: {
            id: number;
            name: number;
            email: number;
            emailVerified: number;
            password: number;
            image: number;
            _all: number;
        };
        UserMinAggregateOutputType: {
            id?: null | string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password?: null | string;
            image?: null | string;
        };
        UserMaxAggregateOutputType: {
            id?: null | string;
            name?: null | string;
            email?: null | string;
            emailVerified?: null | string;
            password?: null | string;
            image?: null | string;
        };
        /** @description Meta information about the request or response */
        _Meta: {
            /** @description Serialization metadata */
            serialization?: unknown;
        } & {
            [key: string]: unknown;
        };
        _Error: {
            error: {
                /** @description Indicates if the error occurred during a Prisma call */
                prisma?: boolean;
                /** @description Indicates if the error was due to rejection by a policy */
                rejectedByPolicy?: boolean;
                /** @description Prisma error code. Only available when "prisma" field is true. */
                code?: string;
                /** @description Error message */
                message: string;
                /** @description Detailed error reason */
                reason?: string;
                /** @description Zod validation errors if the error is due to data validation failure */
                zodErrors?: {
                    [key: string]: unknown;
                };
            } & {
                [key: string]: unknown;
            };
        };
        BatchPayload: {
            count?: number;
        };
        CardCreateArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            data: components["schemas"]["CardCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardCreateManyArgs: {
            data: components["schemas"]["CardCreateManyInput"] | components["schemas"]["CardCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        CardFindUniqueArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where: components["schemas"]["CardWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardFindFirstArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where?: components["schemas"]["CardWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardFindManyArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where?: components["schemas"]["CardWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardUpdateArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where: components["schemas"]["CardWhereUniqueInput"];
            data: components["schemas"]["CardUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardUpdateManyArgs: {
            where?: components["schemas"]["CardWhereInput"];
            data: components["schemas"]["CardUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardUpsertArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where: components["schemas"]["CardWhereUniqueInput"];
            create: components["schemas"]["CardCreateInput"];
            update: components["schemas"]["CardUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardDeleteUniqueArgs: {
            select?: components["schemas"]["CardSelect"];
            include?: components["schemas"]["CardInclude"];
            where: components["schemas"]["CardWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardDeleteManyArgs: {
            where?: components["schemas"]["CardWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardCountArgs: {
            select?: components["schemas"]["CardSelect"];
            where?: components["schemas"]["CardWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardAggregateArgs: {
            where?: components["schemas"]["CardWhereInput"];
            orderBy?: components["schemas"]["CardOrderByWithRelationInput"];
            cursor?: components["schemas"]["CardWhereUniqueInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["CardCountAggregateInput"];
            _min?: components["schemas"]["CardMinAggregateInput"];
            _max?: components["schemas"]["CardMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        CardGroupByArgs: {
            where?: components["schemas"]["CardWhereInput"];
            orderBy?: components["schemas"]["CardOrderByWithRelationInput"];
            by?: components["schemas"]["CardScalarFieldEnum"];
            having?: components["schemas"]["CardScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["CardCountAggregateInput"];
            _min?: components["schemas"]["CardMinAggregateInput"];
            _max?: components["schemas"]["CardMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleCreateArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            data: components["schemas"]["ArticleCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleCreateManyArgs: {
            data: components["schemas"]["ArticleCreateManyInput"] | components["schemas"]["ArticleCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        ArticleFindUniqueArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where: components["schemas"]["ArticleWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleFindFirstArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where?: components["schemas"]["ArticleWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleFindManyArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where?: components["schemas"]["ArticleWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleUpdateArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where: components["schemas"]["ArticleWhereUniqueInput"];
            data: components["schemas"]["ArticleUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleUpdateManyArgs: {
            where?: components["schemas"]["ArticleWhereInput"];
            data: components["schemas"]["ArticleUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleUpsertArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where: components["schemas"]["ArticleWhereUniqueInput"];
            create: components["schemas"]["ArticleCreateInput"];
            update: components["schemas"]["ArticleUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleDeleteUniqueArgs: {
            select?: components["schemas"]["ArticleSelect"];
            include?: components["schemas"]["ArticleInclude"];
            where: components["schemas"]["ArticleWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleDeleteManyArgs: {
            where?: components["schemas"]["ArticleWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleCountArgs: {
            select?: components["schemas"]["ArticleSelect"];
            where?: components["schemas"]["ArticleWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleAggregateArgs: {
            where?: components["schemas"]["ArticleWhereInput"];
            orderBy?: components["schemas"]["ArticleOrderByWithRelationInput"];
            cursor?: components["schemas"]["ArticleWhereUniqueInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["ArticleCountAggregateInput"];
            _min?: components["schemas"]["ArticleMinAggregateInput"];
            _max?: components["schemas"]["ArticleMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ArticleGroupByArgs: {
            where?: components["schemas"]["ArticleWhereInput"];
            orderBy?: components["schemas"]["ArticleOrderByWithRelationInput"];
            by?: components["schemas"]["ArticleScalarFieldEnum"];
            having?: components["schemas"]["ArticleScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["ArticleCountAggregateInput"];
            _min?: components["schemas"]["ArticleMinAggregateInput"];
            _max?: components["schemas"]["ArticleMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationCreateArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            data: components["schemas"]["ConversationCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationCreateManyArgs: {
            data: components["schemas"]["ConversationCreateManyInput"] | components["schemas"]["ConversationCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        ConversationFindUniqueArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where: components["schemas"]["ConversationWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationFindFirstArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where?: components["schemas"]["ConversationWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationFindManyArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where?: components["schemas"]["ConversationWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationUpdateArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where: components["schemas"]["ConversationWhereUniqueInput"];
            data: components["schemas"]["ConversationUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationUpdateManyArgs: {
            where?: components["schemas"]["ConversationWhereInput"];
            data: components["schemas"]["ConversationUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationUpsertArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where: components["schemas"]["ConversationWhereUniqueInput"];
            create: components["schemas"]["ConversationCreateInput"];
            update: components["schemas"]["ConversationUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationDeleteUniqueArgs: {
            select?: components["schemas"]["ConversationSelect"];
            include?: components["schemas"]["ConversationInclude"];
            where: components["schemas"]["ConversationWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationDeleteManyArgs: {
            where?: components["schemas"]["ConversationWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationCountArgs: {
            select?: components["schemas"]["ConversationSelect"];
            where?: components["schemas"]["ConversationWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationAggregateArgs: {
            where?: components["schemas"]["ConversationWhereInput"];
            orderBy?: components["schemas"]["ConversationOrderByWithRelationInput"];
            cursor?: components["schemas"]["ConversationWhereUniqueInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["ConversationCountAggregateInput"];
            _min?: components["schemas"]["ConversationMinAggregateInput"];
            _max?: components["schemas"]["ConversationMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        ConversationGroupByArgs: {
            where?: components["schemas"]["ConversationWhereInput"];
            orderBy?: components["schemas"]["ConversationOrderByWithRelationInput"];
            by?: components["schemas"]["ConversationScalarFieldEnum"];
            having?: components["schemas"]["ConversationScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["ConversationCountAggregateInput"];
            _min?: components["schemas"]["ConversationMinAggregateInput"];
            _max?: components["schemas"]["ConversationMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserCreateArgs: {
            select?: components["schemas"]["UserSelect"];
            data: components["schemas"]["UserCreateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserCreateManyArgs: {
            data: components["schemas"]["UserCreateManyInput"] | components["schemas"]["UserCreateManyInput"][];
            /** @description Do not insert records with unique fields or ID fields that already exist. */
            skipDuplicates?: boolean;
            meta?: components["schemas"]["_Meta"];
        };
        UserFindUniqueArgs: {
            select?: components["schemas"]["UserSelect"];
            where: components["schemas"]["UserWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserFindFirstArgs: {
            select?: components["schemas"]["UserSelect"];
            where?: components["schemas"]["UserWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserFindManyArgs: {
            select?: components["schemas"]["UserSelect"];
            where?: components["schemas"]["UserWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserUpdateArgs: {
            select?: components["schemas"]["UserSelect"];
            where: components["schemas"]["UserWhereUniqueInput"];
            data: components["schemas"]["UserUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserUpdateManyArgs: {
            where?: components["schemas"]["UserWhereInput"];
            data: components["schemas"]["UserUpdateManyMutationInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserUpsertArgs: {
            select?: components["schemas"]["UserSelect"];
            where: components["schemas"]["UserWhereUniqueInput"];
            create: components["schemas"]["UserCreateInput"];
            update: components["schemas"]["UserUpdateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserDeleteUniqueArgs: {
            select?: components["schemas"]["UserSelect"];
            where: components["schemas"]["UserWhereUniqueInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserDeleteManyArgs: {
            where?: components["schemas"]["UserWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserCountArgs: {
            select?: components["schemas"]["UserSelect"];
            where?: components["schemas"]["UserWhereInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserAggregateArgs: {
            where?: components["schemas"]["UserWhereInput"];
            orderBy?: components["schemas"]["UserOrderByWithRelationInput"];
            cursor?: components["schemas"]["UserWhereUniqueInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["UserCountAggregateInput"];
            _min?: components["schemas"]["UserMinAggregateInput"];
            _max?: components["schemas"]["UserMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
        UserGroupByArgs: {
            where?: components["schemas"]["UserWhereInput"];
            orderBy?: components["schemas"]["UserOrderByWithRelationInput"];
            by?: components["schemas"]["UserScalarFieldEnum"];
            having?: components["schemas"]["UserScalarWhereWithAggregatesInput"];
            take?: number;
            skip?: number;
            _count?: boolean | components["schemas"]["UserCountAggregateInput"];
            _min?: components["schemas"]["UserMinAggregateInput"];
            _max?: components["schemas"]["UserMaxAggregateInput"];
            meta?: components["schemas"]["_Meta"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    createCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertCard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CardUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Card"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["CardCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateCard"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByCard: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["CardGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArticleCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArticleCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArticleUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArticleUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertArticle: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ArticleUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Article"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["ArticleCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateArticle"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByArticle: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["ArticleGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConversationCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConversationCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConversationUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConversationUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertConversation: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ConversationUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["Conversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["ConversationCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateConversation"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByConversation: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["ConversationGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserCreateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    createManyUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserCreateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findUniqueUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findFirstUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    findManyUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpdateArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    updateManyUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpdateManyArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    upsertUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserUpsertArgs"];
            };
        };
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["User"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    deleteManyUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["BatchPayload"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    countUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: number | components["schemas"]["UserCountAggregateOutputType"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    aggregateUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["AggregateUser"];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
    groupByUser: {
        parameters: {
            query: {
                /** @description Superjson-serialized Prisma query object */
                q: string;
                /** @description Superjson serialization metadata for parameter "q" */
                meta?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description The Prisma response data serialized with superjson */
                        data: components["schemas"]["UserGroupByOutputType"][];
                        /** @description The superjson serialization metadata for the "data" field */
                        meta?: components["schemas"]["_Meta"];
                    };
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
            /** @description Request is unprocessable due to validation errors */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["_Error"];
                };
            };
        };
    };
}
